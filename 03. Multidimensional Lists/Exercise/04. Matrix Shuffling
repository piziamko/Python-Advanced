# Write a program that reads a string, matrix, from the console and perform certain operations with
# 	its elements. User input is provided in a similar way like in the problems above - first you read
# 	the dimensions and then the data.
# Your program should receive commands in format: "swap row1 col1 row2 col2" where row1, row2, col1, col2
# are coordinates in the matrix. For a command to be valid, it should start with the "swap" keyword along
# with four valid coordinates (no more, no less). You should swap the values at the given
# and print the matrix at each step
# (thus you'll be able to check if the operation was performed correctly).
# If the command is not valid
# (doesn't contain the keyword "swap", has fewer or more coordinates entered or the given coordinates do not exist), '
# 'print "Invalid input!" and move on to the next command. Your program should finish when the string "END" is entered.


initial_row , initial_col = list(map(int, input().split()))
matrix = [input().split() for c in range(initial_row)]
command = input()
while command != 'END':
	command = command.split()
	if len(command) == 5:
		swap = command[0]
		row1, col1, row2, col2 = list(map(int,command[1:]))
		if row1 in range(len(matrix)) and row2 in range(len(matrix)) and col1 in range(len(matrix[initial_row-1])) and col2 \
			in range(len(matrix[initial_row-1])) and swap == 'swap':
			matrix[row1][col1], matrix[row2][col2] = matrix[row2][col2], matrix[row1][col1]
			[print(' '.join(c)) for c in matrix]
		else:
			print('Invalid input!')
	else:
		print( 'Invalid input!' )
	command = input()


#####
def validate_indexes(element_position, rows_count, cols_count):
    return 0 <= element_position[0] < rows_count and 0 <= element_position[1] < cols_count


def validate_command_data(command_data, rows_count, cols_count):
    tokens = command_data.split()
    if tokens[0] == "swap" and len(tokens) == 5:
        command, *rows_data = tokens
        first_element_position = [int(rows_data[0]), int(rows_data[1])]
        second_element_position = [int(rows_data[2]), int(rows_data[3])]

        return validate_indexes(first_element_position, rows_count, cols_count) \
               and validate_indexes(second_element_position, rows_count, cols_count)


def swap_matrix_elements(matrix, rows_data):
    first_row, first_col, second_row, second_col = list(map(int, rows_data))
    matrix[first_row][first_col], matrix[second_row][second_col] = matrix[second_row][second_col], \
                                                                   matrix[first_row][first_col]
    return matrix


rows_count, cols_count = list(map(int, input().split()))
matrix = [input().split() for _ in range(rows_count)]

command_data = input()
while not command_data == "END":
    if validate_command_data(command_data, rows_count, cols_count):
        command, *rows_data = command_data.split()
        matrix = swap_matrix_elements(matrix, rows_data)
        [print(' '.join(row)) for row in matrix]
    else:
        print("Invalid input!")

    command_data = input()
